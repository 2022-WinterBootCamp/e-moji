version: "3.8"

networks:
  monitor:
    driver: bridge

volumes:
  build_folder:
  # prometheus_data: {}
  # grafana_data: {}

services:
  backend:
    build: ./backend/backend
    command: >
      bash -c "python wait_mysql.py &&
               python manage.py makemigrations &&
               python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8080" &&

    ports:
      - "8080:8080"
    volumes:
      - ./backend/backend:/app
    depends_on:
      - redis

  ai_server:
    build: ./backend/ai
    ports:
      - "8000:8000"
    environment:
      FLASK_DEBUG: 1
    volumes:
      - ./backend/ai:/ai

  # prometheus:
  #   image: prom/prometheus
  #   restart: always
  #   volumes:
  #     - ./backend/monitoring/prometheus:/etc/prometheus/
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   ports:
  #     - 9090:9090
  #   links:
  #     - alertmanager:alertmanager

  # node-exporter:
  #   image: prom/node-exporter
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.sysfs=/host/sys'
  #     - --collector.filesystem.ignored-mount-points
  #     - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
  #   ports:
  #     - 9100:9100
  #   restart: always
  #   deploy:
  #     mode: global

  # alertmanager:
  #   image: prom/alertmanager
  #   restart: always
  #   ports:
  #     - 9093:9093
  #   volumes:
  #     - ./backend/monitoring/alertmanager/:/etc/alertmanager/
  #   command:
  #     - '--config.file=/etc/alertmanager/config.yml'
  #     - '--storage.path=/alertmanager'

  # grafana:
  #   image: grafana/grafana
  #   user: '472'
  #   restart: always
  #   environment:
  #     GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./backend/monitoring/grafana/provisioning/:/etc/grafana/provisioning/
  #   env_file:
  #     - ./backend/monitoring/grafana/config.monitoring
  #   ports:
  #     - 3001:3000
  #   depends_on:
  #     - prometheus

  redis:
    container_name: redis
    image: redis:latest
    hostname: redis
    ports:
      - "6379:6379"

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    ports:
      - "5672:5672" # Default Port
      - "15672:15672" # For UI
    expose:
      - "15672"

  celery_worker:
    container_name: celery_worker
    build:
      context: ./backend/backend
      dockerfile: dockerfile
    volumes:
      - ./backend/backend:/backend
    ports: []
    depends_on:
      - rabbitmq
      - redis
      - backend
    environment:
      - C_FORCE_ROOT=true
    command: sh -c "python wait_mysql.py &&
      celery -A backend worker --loglevel=info"

  nginx:
    build: ./nginx
    ports:
      - "80:80"
    volumes:
      - build_folder:/var/www/frontend
    depends_on:
      - backend
      - client

  client:
    container_name: client
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend/:/frontend
      - build_folder:/frontend/build
    tty: true
